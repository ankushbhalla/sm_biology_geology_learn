	/**
 * SCORM API
 */

APIInitialized = false;
APILastError = "301";

// Declare Scorm API object for 1.2

var datamodel;
if (typeof cmi === "undefined") {
    var cmi = new Object();
}
cmi.core = new Object();
cmi.core.score = new Object();
cmi.objectives = new Object();
cmi.student_data = new Object();
cmi.student_preference = new Object();
cmi.interactions = new Object();
// deprecated evaluation attributes
cmi.evaluation = new Object();
cmi.evaluation.comments = new Object();
// 2004:
cmi.score = new Object();


var nav = new Object();

var adl = new Object();
adl.nav = new Object();

API = new APIClass_12();
api = new APIClass_12();

// Declare Scorm API object for 2004

API_1484_11 = new APIClass_12();
api_1484_11 = new APIClass_12();

var init_total_time = "0000:00:00.00";

var commitEnabled = true;

// ====================================================
// API Class Constructor
function APIClass_12() {

	//SCORM 1.2

	// Execution State
	this.LMSInitialize = LMSInitialize;
	this.LMSFinish = LMSFinish;

	// Data Transfer
	this.LMSGetValue = LMSGetValue;
	this.LMSSetValue = LMSSetValue;
	this.LMSCommit = LMSCommit;

	// State Management
	this.LMSGetLastError = LMSGetLastError;
	this.LMSGetErrorString = LMSGetErrorString;
	this.LMSGetDiagnostic = LMSGetDiagnostic;

	// Private
	this.APIError = APIError;

	// SCORM 2004

	// Execution State
	this.Initialize = LMSInitialize;
	this.Terminate = LMSFinish;

	// Data Transfer
	this.GetValue = LMSGetValue;
	this.SetValue = LMSSetValue;
	this.Commit = LMSCommit;

	// State Management
	this.GetLastError = LMSGetLastError;
	this.GetErrorString = LMSGetErrorString;
	this.GetDiagnostic = LMSGetDiagnostic;

	this.isBlink = true;

	// SCORM 1.2 API Implementation
	// Standard Data Type Definition
	CMIString256 = '^[\\u0000-\\uffff]{0,255}$';
	CMIString4096 = '^[\\u0000-\\uffff]{0,4096}$';
	CMIString65536 = '^[\\u0000-\\uffff]{0,65536}$';
	CMIString131072 = '^[\\u0000-\\uffff]{0,131072}$';
	CMITime = '^([0-2]{1}[0-9]{1}):([0-5]{1}[0-9]{1}):([0-5]{1}[0-9]{1})(\.[0-9]{1,2})?$';
	CMITimespan = '^([0-9]{2,4}):([0-9]{2}):([0-9]{2})(\.[0-9]{1,2})?$';
	CMITimespan2 = '^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d{1,2})?S)?)?$';
	CMIInteger = '^\\d+$';
	CMISInteger = '^-?([0-9]+)$';
	CMIDecimal = '^-?([0-9]{0,3})(\.[0-9]{1,15})?$';
	CMIIdentifier = '^[\\u0021-\\u007E]{0,255}$';
	CMIFeedback = CMIString256; // This must be redefined
	CMIIndex = '[._](\\d+).';
	// Vocabulary Data Type Definition
	CMIStatus = '^passed$|^completed$|^failed$|^incomplete$|^browsed$|^not attempted$';
	CMIStatus2 = '^passed$|^completed$|^failed$|^incomplete$|^browsed$|^not attempted$';
	CMIExit = '^time-out$|^suspend$|^logout$|^$';
	CMIType = '^true-false$|^choice$|^fill-in$|^matching$|^performance$|^sequencing$|^likert$|^numeric$';
	CMIResult = '^correct$|^wrong$|^unanticipated$|^neutral$|^([0-9]{0,3})?(\.[0-9]{1,2})?$';
	NAVEvent = '^previous$|^continue$';
	// Children lists
	//2004 cmi_children = 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions';
	cmi_children = 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,entry,exit,location,score,session_time,learner_id';
	core_children = 'student_id,student_name,student_surname,student_ImageUrl,user_role,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time';
	//2004 score_children = 'raw,min,max';
	score_children = 'raw,min,max,scaled,manual_raw';
	comments_children = 'content,location,time';
	//2004 objectives_children = 'id,score,status';
	objectives_children = 'progress_measure, completion_status, success_status, description, id,score,status';
	correct_responses_children = 'pattern';
	student_data_children = 'mastery_score,max_time_allowed,time_limit_action';
	student_preference_children = 'audio,language,speed,text';
	interactions_children = 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency';
	// Data ranges
	score_range = '-1#100';  // Cambiamos el minimo de 0 a -1
	audio_range = '-1#100';
	speed_range = '-100#100';
	weighting_range = '-100#100';
	text_range = '-1#1';

	// 2004
	progress_range = '0#100';

	// The SCORM 1.2 data model
	// blink changes: Change suspend_data from CMIString4096 to CMIString131072 to avoid size limit error
	// ejemplo SCORM 1.3 (2004): http://www.integr-8.com/moodle/moodle/mod/scorm/datamodels/scorm1_3.js.php
	datamodel =  {
		'cmi._children':{'defaultvalue':cmi_children, 'mod':'r', 'writeerror':'402'},
		'cmi._version':{'defaultvalue':'3.4', 'mod':'r', 'writeerror':'402'},
		'cmi.core._children':{'defaultvalue':core_children, 'mod':'r', 'writeerror':'402'},
		'cmi.core.student_id':{'defaultvalue':'-1', 'mod':'r', 'writeerror':'403'},
		'cmi.core.student_name':{'defaultvalue':'Annonymous', 'mod':'r', 'writeerror':'403'},
		'cmi.core.student_surname':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.core.student_ImageUrl':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.core.user_role':{'defaultvalue':'S', 'mod':'r', 'writeerror':'403'},
		'cmi.core.lesson_location':{'defaultvalue':'', 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.credit':{'defaultvalue':'no-credit', 'mod':'r', 'writeerror':'403'},
		'cmi.core.lesson_status':{'defaultvalue':'not attempted', 'format':CMIStatus, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.entry':{'defaultvalue':'ab-initio', 'mod':'r', 'writeerror':'403'},
		'cmi.core.score._children':{'defaultvalue':score_children, 'mod':'r', 'writeerror':'402'},
		'cmi.core.score.raw':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.score.max':{'defaultvalue':'100', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.score.min':{'defaultvalue':'0', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.total_time':{'defaultvalue':'00:00:00', 'format':CMITimespan, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.lesson_mode':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.core.exit':{'defaultvalue':'', 'format':CMIExit, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.core.session_time':{'format':CMITimespan, 'mod':'w', 'defaultvalue':'00:00:00', 'readerror':'404', 'writeerror':'405'},
		'cmi.suspend_data':{'defaultvalue':'', 'format':CMIString131072, 'mod':'rw', 'writeerror':'405'},
		'cmi.launch_data':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.comments':{'defaultvalue':'', 'format':CMIString65536, 'mod':'rw', 'writeerror':'405'},
		// deprecated evaluation attributes
		'cmi.evaluation.comments._count':{'defaultvalue':'0', 'mod':'r', 'writeerror':'402'},
		'cmi.evaluation.comments._children':{'defaultvalue':comments_children, 'mod':'r', 'writeerror':'402'},
		'cmi.evaluation.comments.n.content':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.evaluation.comments.n.location':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.evaluation.comments.n.time':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMITime, 'mod':'rw', 'writeerror':'405'},
		'cmi.comments_from_lms':{'mod':'r', 'writeerror':'403'},
		'cmi.objectives._children':{'defaultvalue':objectives_children, 'mod':'r', 'writeerror':'402'},
		'cmi.objectives._count':{'mod':'r', 'defaultvalue':'0', 'writeerror':'402'},
		'cmi.objectives.n.id':{'pattern':CMIIndex, 'format':CMIIdentifier, 'mod':'rw', 'writeerror':'405'},
		'cmi.objectives.n.score._children':{'pattern':CMIIndex, 'mod':'r', 'writeerror':'402'},
		'cmi.objectives.n.score.raw':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.objectives.n.score.min':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.objectives.n.score.max':{'defaultvalue':'', 'pattern':CMIIndex, 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.objectives.n.status':{'pattern':CMIIndex, 'format':CMIStatus2, 'mod':'rw', 'writeerror':'405'},
		/* 2004 ini */
		'cmi.objectives.n.success_status':{'defaultvalue':'unknown', 'pattern':CMIIndex, 'format':CMIStatus2, 'mod':'rw'},
		'cmi.objectives.n.completion_status':{'defaultvalue':'unknown', 'pattern':CMIIndex, 'format':CMIStatus2, 'mod':'rw'},
		'cmi.objectives.n.progress_measure':{'defaultvalue':null, 'format':CMIDecimal, 'range':progress_range, 'mod':'rw'},
		/* 2004 fin */
		'cmi.student_data._children':{'defaultvalue':student_data_children, 'mod':'r', 'writeerror':'402'},
		'cmi.student_data.mastery_score':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.student_data.max_time_allowed':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.student_data.time_limit_action':{'defaultvalue':'', 'mod':'r', 'writeerror':'403'},
		'cmi.student_preference._children':{'defaultvalue':student_preference_children, 'mod':'r', 'writeerror':'402'},
		'cmi.student_preference.audio':{'defaultvalue':'0', 'format':CMISInteger, 'range':audio_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.student_preference.language':{'defaultvalue':'', 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.student_preference.speed':{'defaultvalue':'0', 'format':CMISInteger, 'range':speed_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.student_preference.text':{'defaultvalue':'0', 'format':CMISInteger, 'range':text_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.interactions._children':{'defaultvalue':interactions_children, 'mod':'r', 'writeerror':'402'},
		'cmi.interactions._count':{'mod':'r', 'defaultvalue':'0', 'writeerror':'402'},
		'cmi.interactions.n.id':{'pattern':CMIIndex, 'format':CMIIdentifier, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.objectives._count':{'pattern':CMIIndex, 'mod':'r', 'defaultvalue':'0', 'writeerror':'402'},
		'cmi.interactions.n.objectives.n.id':{'pattern':CMIIndex, 'format':CMIIdentifier, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.time':{'pattern':CMIIndex, 'format':CMITime, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.type':{'pattern':CMIIndex, 'format':CMIType, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.correct_responses._count':{'pattern':CMIIndex, 'mod':'r', 'defaultvalue':'0', 'writeerror':'402'},
		'cmi.interactions.n.correct_responses.n.pattern':{'pattern':CMIIndex, 'format':CMIFeedback, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.weighting':{'pattern':CMIIndex, 'format':CMIDecimal, 'range':weighting_range, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.student_response':{'pattern':CMIIndex, 'format':CMIFeedback, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.result':{'pattern':CMIIndex, 'format':CMIResult, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.interactions.n.latency':{'pattern':CMIIndex, 'format':CMITimespan, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'nav.event':{'defaultvalue':'', 'format':NAVEvent, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		/* scorm 2004 ini */
		'cmi.completion_status':{'defaultvalue':'not attempted', 'format':CMIStatus, 'mod':'rw', 'writeerror':'405'},
		'cmi.success_status':{'defaultvalue':'not attempted', 'format':CMIStatus, 'mod':'rw', 'writeerror':'405'},
		'cmi.score._children':{'defaultvalue':score_children, 'mod':'r', 'writeerror':'402'},
		'cmi.score.scaled':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		//'cmi.session_time':{'defaultvalue':'PT0H0M0S', 'format':CMITimespan2, 'mod':'w', 'writeerror':'405'},
		'cmi.session_time':{'defaultvalue':'PT0H0M0S', 'format':CMIString256, 'mod':'w', 'writeerror':'405'},
		'cmi.location':{'defaultvalue':'', 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.exit':{'defaultvalue':'', 'format':CMIExit, 'mod':'w', 'readerror':'404', 'writeerror':'405'},
		'cmi.progress_measure':{'defaultvalue':'', 'format':CMIDecimal, 'range':progress_range, 'mod':'rw', 'readerror':'404', 'writeerror':'405'},
		'adl.nav.request':{'defaultvalue':'', 'format':CMIString256, 'mod':'rw', 'writeerror':'405'},
		'cmi.learner_id':{'defaultvalue':'-1', 'mod':'r', 'writeerror':'403'},
		/* scorm 2004 fin */
		'cmi.core.score.manual_raw':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'403'},
		'cmi.core.score.scoreAvg1':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.score.scoreAvg2':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.score.scoreAvg3':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'},
		'cmi.core.score.scoreAvg4':{'defaultvalue':'', 'format':CMIDecimal, 'range':score_range, 'mod':'rw', 'writeerror':'405'}
	};
	//
	// Datamodel inizialization
	//

	for (element in datamodel) {
		if (element.match(/\.n\./) == null) {
			if ((typeof eval('datamodel["'+element+'"].defaultvalue')) != 'undefined') {
				eval(element+' = datamodel["'+element+'"].defaultvalue;');
			} else {
				eval(element+' = "";');
			}
		}
	}

	if (cmi.core.lesson_status == '') {
		cmi.core.lesson_status = 'not attempted';
	}


}


// ====================================================
// Execution State
//

// Initialize
// According to SCORM 1.2 reference :
//    - arg must be "" (empty string)
//    - return value : "true" or "false"
function LMSInitialize(arg) {
	if ( arg!="" ) {
			this.APIError("201");
			return "false";
	}
	this.APIError("0");
	APIInitialized = true;

	if ( this.LMSGetValue("cmi.core.lesson_status") == LESSON_STATUS_NOTATTEMPTED ) {
			this.LMSSetValue("cmi.core.lesson_status",LESSON_STATUS_BROWSED);
	}

	return "true";
}
// Finish
// According to SCORM 1.2 reference
//    - arg must be "" (empty string)
//    - trigger [string]: indicates the trigger function to write the offline script
//    - return value : "true" or "false"
function LMSFinish(arg, trigger) {
	var trigger = trigger || '';
	if ( APIInitialized ) {
		if ( arg!="" ) {
			this.APIError("201");
			return "false";
		}
		this.APIError("0");

		try {
			if (typeof idalumno === "undefined" || idalumno === "" || blink.user.esAlumno()) {
				if(cmi.core.session_time == '' || cmi.core.session_time == datamodel["cmi.core.session_time"].defaultvalue){
					if(cmi.session_time == '' || cmi.session_time == datamodel["cmi.session_time"].defaultvalue){
						cmi.core.session_time = calculateSCORMSessionTime();
					}else{
						try{
							cmi.core.session_time = sessionTimeSCORM2004To12(cmi.session_time);
						}
						catch(err) {
							errorCode = eval('datamodel["cmi.session_time"].writeerror');
							blink.log.warning("LMSFinish errorcode "+errorCode+" para cmi.session_time");
						}
					}
				}
				var tiempo_total = new Date();
				tiempo_total.setTime(parseSCORMTime(cmi.core.total_time).getTime() + parseSCORMTime(cmi.core.session_time).getTime());
			 	cmi.core.total_time = printSCORMTime(tiempo_total);
			}

			do_commit(false, trigger);
		}
		catch(err) {
			_showAlert(textweb('scorm_1') + " :" + err + " [" + window.scriptOffline + "]");
			blink.log.error(textweb('scorm_1') + " [" + window.scriptOffline + "]", err);
		}

		APIInitialized = false; //

		// check for navigation (v.2004)
		if (adl.nav.request && adl.nav.request != '') {
			// format: {target=assessment_item}jump
			var bus = 'target=';
			var posaux = adl.nav.request.indexOf(bus);
			if (posaux !== false) {
				ini = posaux+bus.length;
				fin = adl.nav.request.indexOf('}');
				if (ini && fin && fin > ini) {
					new_scorm_id = adl.nav.request.substring(ini, fin);
					gotoScormActivity(new_scorm_id);
				}
			}
		}

		if (cmi.core.exit && cmi.core.exit == 'logout') {
			blink.rest.exit();
		}

		return "true";
	} else {
		this.APIError("301");   // not initialized
		return "false";
	}
}

// Uses redireccionar to go to the activity wich has scorm_id
function gotoScormActivity(scorm_id) {
	if (canUseOfflineUrls()) {
		getAJAX('/coursePlayer/dict_refID_url_'+idcurso+'.json',
			function (data) {
				if (typeof(data) == 'string') data = window.JSON.parse(data);
				var url = data[scorm_id].urlOffline;
				if (window.idalumno) url += '&idalumno='+idalumno;
				if (blink.isOfflinePCApp) url += '#layout=fullscreen';
				goToHref(url);
			}, false, undefined, undefined, true // last parameter: syncro
		);
	}
	else {
		getAJAX('/LMS/ajax.php?op=activity.gotoscormactivity&idscorm='+scorm_id+'&idclaseorig=' + idclase + '&idcurso=' + idcurso,
			function (msg) {
				if (msg.startsWith('OK') && msg.length > 2) {
					var url = msg.substr(2);
					if (window.idalumno) url += '&idalumno='+idalumno;
					goToHref(url);
				}
				else {
					standardAJAX(msg);
				}
			}, false, undefined, undefined, true // last parameter: syncro
		);
	}
}
// ====================================================
// Data Transfer
//
function LMSGetValue(element) {
    var debugOn = false;
    if (debugOn) console.log("----------- en (scormAPI_12) LMSGetValue con element " + element);

    if (blink && blink.scorm && blink.scorm.LMSGetValue) {
        var _val  = blink.scorm.LMSGetValue(element);
        if (_val !== false) return _val;
    }

	element = element.replace('cmi.score','cmi.core.score');
	element = element.replace('cmi.core.lesson_mode','cmi.mode');

	errorCode = "0";
	if (APIInitialized) {
		if (element !="") {
			expression = new RegExp(CMIIndex,'g');
			elementmodel = String(element).replace(expression,'.n.');
			if ((typeof eval('datamodel["'+elementmodel+'"]')) != "undefined") {
				if (eval('datamodel["'+elementmodel+'"].mod') != 'w') {
					element = String(element).replace(expression, "_$1.");
					elementIndexes = element.split('.');
					subelement = 'cmi';
					i = 1;
					while ((i < elementIndexes.length) && (typeof eval(subelement) != "undefined")) {
						subelement += '.'+elementIndexes[i++];
					}
					if (subelement == element) {
						errorCode = "0";
						return eval(element);
					} else {
						errorCode = "0"; // Need to check if it is the right errorCode
					}
				} else {
					errorCode = eval('datamodel["'+elementmodel+'"].readerror');
				}
			} else {
				childrenstr = '._children';
				countstr = '._count';
				if (elementmodel.substr(elementmodel.length-childrenstr.length,elementmodel.length) == childrenstr) {
					parentmodel = elementmodel.substr(0,elementmodel.length-childrenstr.length);
					if ((typeof eval('datamodel["'+parentmodel+'"]')) != "undefined") {
						errorCode = "202";
					} else {
						errorCode = "201";
					}
				} else if (elementmodel.substr(elementmodel.length-countstr.length,elementmodel.length) == countstr) {
					parentmodel = elementmodel.substr(0,elementmodel.length-countstr.length);
					if ((typeof eval('datamodel["'+parentmodel+'"]')) != "undefined") {
						errorCode = "203";
					} else {
						errorCode = "201";
					}
				} else {
					errorCode = "201";
				}
			}
		} else {
			errorCode = "201";
		}
	} else {
		errorCode = "301";
	}
	if (errorCode != "0") {
		blink.log.warning("LMSGetValue errorcode "+errorCode+" para "+element);
	}
	return "";
}

function LMSSetValue (element,value) {
	var debugOn = false;
	if (debugOn) console.log("----------- en (scormAPI_12) LMSSetValue con element " + element + " y value " + value + ' hash = ' + $('#t0_iframe').contents().get(0).location.hash);

    if (blink && blink.scorm && blink.scorm.LMSSetValue) {
        var _val  = blink.scorm.LMSSetValue(element, value);
        if (_val !== false) return _val;
    }

	//? no se si es necesario hacer esto
	if (!element) return "false";
	element = element.replace('cmi.score','cmi.core.score');

	//BK-19467 Traza json erroneo en suspenddata
	if ((element.indexOf('suspenddata') != -1 || element.indexOf('suspend_data') != -1) && !isJSON(value)){
		blink.log.error('Se guarda un suspenddata erroneo: ', value);
	}

	errorCode = "0";
	if (APIInitialized) {
		if (element != "") {
			expression = new RegExp(CMIIndex,'g');
			elementmodel = String(element).replace(expression,'.n.');
			if ((typeof eval('datamodel["'+elementmodel+'"]')) != "undefined") {
				if (eval('datamodel["'+elementmodel+'"].mod') != 'r') {
					expression = new RegExp(eval('datamodel["'+elementmodel+'"].format'));
					value = value+'';
					matches = value.match(expression);
					if (matches != null) {
						//Create dynamic data model element
						if (element != elementmodel) {
							elementIndexes = element.split('.');
							subelement = 'cmi';
							for (i=1;i < elementIndexes.length-1;i++) {
								elementIndex = elementIndexes[i];
								if (elementIndexes[i+1].match(/^\d+$/)) {
									if ((typeof eval(subelement+'.'+elementIndex)) == "undefined") {
										eval(subelement+'.'+elementIndex+' = new Object();');
										eval(subelement+'.'+elementIndex+'._count = 0;');
									}
									if (elementIndexes[i+1] == eval(subelement+'.'+elementIndex+'._count')) {
										eval(subelement+'.'+elementIndex+'._count++;');
									}
									if (elementIndexes[i+1] > eval(subelement+'.'+elementIndex+'._count')) {
										errorCode = "201";
									}
									subelement = subelement.concat('.'+elementIndex+'_'+elementIndexes[i+1]);
									i++;
								} else {
									subelement = subelement.concat('.'+elementIndex);
								}
								if ((typeof eval(subelement)) == "undefined") {
									eval(subelement+' = new Object();');
									if (subelement.substr(0,14) == 'cmi.objectives') {
										eval(subelement+'.score = new Object();');
										eval(subelement+'.score._children = score_children;');
										eval(subelement+'.score.raw = "";');
										eval(subelement+'.score.min = "";');
										eval(subelement+'.score.max = "";');
									}
									if (subelement.substr(0,16) == 'cmi.interactions') {
										eval(subelement+'.objectives = new Object();');
										eval(subelement+'.objectives._count = 0;');
										eval(subelement+'.correct_responses = new Object();');
										eval(subelement+'.correct_responses._count = 0;');
									}
								}
							}
							element = subelement.concat('.'+elementIndexes[elementIndexes.length-1]);
						}
						//Store data
						if (errorCode == "0") {
							if ((typeof eval('datamodel["'+elementmodel+'"].range')) != "undefined") {
								range = eval('datamodel["'+elementmodel+'"].range');
								ranges = range.split('#');
								value = value*1.0;
								if (debugOn)  console.log(".... value es " + value);
								if ((value >= ranges[0]) && (value <= ranges[1])) {
									eval(element+'=value;');
									errorCode = "0";
									return "true";
								} else {
									errorCode = eval('datamodel["'+elementmodel+'"].writeerror');
								}
							} else {
								if (element == 'cmi.comments') {
									//BK-8319 Ahora este campo se utiliza para los comentarios del profesor de una actividad
									//cmi.comments = cmi.comments + value;
									cmi.comments = value;
								} else {
									eval(element+'=value;');
								}
								if (debugOn) console.log("---- value es " + value);
								errorCode = "0";
								return "true";
							}
						}
					} else {
						errorCode = eval('datamodel["'+elementmodel+'"].writeerror');
					}
				} else {
					errorCode = eval('datamodel["'+elementmodel+'"].writeerror');
				}
			} else {
				errorCode = "201";
			}
		} else {
			errorCode = "201";
		}
	} else {
		errorCode = "301";
	}
	if (errorCode != "0") {
		blink.log.warning("LMSSetValue errorcode "+errorCode+" para "+element+" ("+value+")");
	}
	return "false";
}


function LMSCommit(arg) {
	if (APIInitialized) {
		if (arg != "") {
			this.APIError("201");
			return "false";
		} else {
			this.APIError("0");
			try {
				do_commit();
			}
			catch(err) {
				blink.log.error(err);
			}
			return "true";
		}
	} else {
		this.APIError("301");
		return "false";
	}
}


// ====================================================
// State Management
//
function LMSGetLastError() {
	return APILastError;
}

function LMSGetErrorString(num) {
	return errCodes[num];
}

function LMSGetDiagnostic(num) {
	if ( num=="" ) num = APILastError;
	return errDiagn[num];
}


// ====================================================
// Private
//
function APIError(num) {
	APILastError = num;
}

// ====================================================
// Error codes and Error diagnostics
//
var errCodes = new Array();
errCodes["0"]   = "No Error";
errCodes["101"] = "General Exception";
errCodes["102"] = "Server is busy";
errCodes["201"] = "Invalid Argument Error";
errCodes["202"] = "Element cannot have children";
errCodes["203"] = "Element not an array.  Cannot have count";
errCodes["301"] = "Not initialized";
errCodes["401"] = "Not implemented error";
errCodes["402"] = "Invalid set value, element is a keyword";
errCodes["403"] = "Element is read only";
errCodes["404"] = "Element is write only";
errCodes["405"] = "Incorrect Data Type";

var errDiagn = new Array();
errDiagn["0"]   = "No Error";
errDiagn["101"] = "Possible Server error.  Contact System Administrator";
errDiagn["102"] = "Server is busy and cannot handle the request.  Please try again";
errDiagn["201"] = "The course made an incorrect function call.  Contact course vendor or system administrator";
errDiagn["202"] = "The course made an incorrect data request. Contact course vendor or system administrator";
errDiagn["203"] = "The course made an incorrect data request. Contact course vendor or system administrator";
errDiagn["301"] = "The system has not been initialized correctly.  Please contact your system administrator";
errDiagn["401"] = "The course made a request for data not supported by Answers.";
errDiagn["402"] = "The course made a bad data saving request.  Contact course vendor or system adminsitrator";
errDiagn["403"] = "The course tried to write to a read only value.  Contact course vendor";
errDiagn["404"] = "The course tried to read a value that can only be written to.  Contact course vendor";
errDiagn["405"] = "The course gave an incorrect Data type.  Contact course vendor";


// ====================================================
//
//


// El parámetro trigger se usa para indicar al script offline cuando finalizar
// las actividades
function do_commit(forceOnline, trigger) {
	var onLoadScript = function() {
		var trigger = trigger || '';
		if (blink.user.esAnonimo()) {  return false;} //si el usuario es anonimo no hago commit
		if (!window._permitirFinishClass) return false;
		// BK-10176
		if (window.cancelScorm === true) return false;
		window.repeatClass = window.repeatClass ||  false;
		window.onBeforeUnloadCalled = window.onBeforeUnloadCalled || false;

		//Si el profesor está puntuando la actividad de un alumno, se debe forzar online.
		if (offline && idalumno != '' && typeof idalumno != "undefined" && idalumno != blink.user.getID()) {
			forceOnline = true;
		}

		forceOnline = forceOnline || false;

		if(offline && forceOnline && blink.isApp){
			OFFLINE_ENGINE = true;
		}

		if ((esWeb || (idalumno == '' || (idalumno != '' && cmi.completion_status != LESSON_STATUS_COMPLETED))) && modoVisualizacionLabel != "standalone") {

			// Desactivamos la notificación en caso acceso anónimo, de suplantar a un alumno, si la clase está terminada o si estamos standalone.

			var SCORMparams = blink.scorm.getSCORMParams();
	        if (!SCORMparams) return false;
			var URL = '/LMS/ajax.php?op=commitSCORM&_nocache=' + performance.now();
			// En offline se interceptará la URL
	        // Luego llamará al uploaderPlus para hacer el trabajo
			var postData = 'idclase=' + SCORMparams.idclase + '&idtema=' + SCORMparams.idtema + '&idcurso=' + SCORMparams.idcurso + ((idalumno != '')?'&idalumno=' + idalumno:'');
			var formData = new FormData();
			formData.append('idclase', SCORMparams.idclase);
			formData.append('idtema', SCORMparams.idtema);
			formData.append('idcurso', SCORMparams.idcurso);
			if(idalumno != ''){
				formData.append('idalumno', idalumno);
			}
			// construimos los parámetros igual que lo hace scormAPI_new.js.php
			// porque es lo que se utilizará para regenerar este fichero en offline

			if(repeatClass){
			 	cmi.core.total_time  = init_total_time;
			}

			var common_status = (cmi.completion_status == LESSON_STATUS_COMPLETED || cmi.completion_status == LESSON_STATUS_INCOMPLETE) ? cmi.completion_status :  cmi.core.lesson_status;
			additional_data = [];
			additional_data['umpid'] = 			'';
			additional_data['lessonlocation'] = cmi.core.lesson_location;
			additional_data['lessonstatus'] = 	common_status; //cmi.core.lesson_status;
			additional_data['credit'] = 		cmi.core.credit;
			additional_data['entry'] = 			cmi.core.entry;
			additional_data['raw'] = 			cmi.core.score.raw;
			additional_data['scoreAvg1'] = 		cmi.core.score.scoreAvg1;
			additional_data['scoreAvg2'] = 		cmi.core.score.scoreAvg2;
			additional_data['scoreAvg3'] = 		cmi.core.score.scoreAvg3;
			additional_data['scoreAvg4'] = 		cmi.core.score.scoreAvg4;
			additional_data['totaltime'] = 		cmi.core.total_time;
			additional_data['sessiontime'] = 	cmi.core.session_time;
			additional_data['suspenddata'] = 	cmi.suspend_data;
			// Lo ponemos aquí para no procesarlo a posteriori en el CollectDataArray
			additional_data['suspend_data'] = 	cmi.suspend_data;
			additional_data['scoremin'] = 		cmi.core.score.min;
			additional_data['scoremax'] = 		cmi.core.score.max;

			// Ponemos todo, pues luego se necesita para hacer commit_scorm desde offline
			//additional_data['student_id'] = 	cmi.student_id;
			//additional_data['student_name'] = 	cmi.student_name;
			additional_data['lesson_location'] = cmi.core.lesson_location;
			additional_data['core.lesson_location'] = cmi.core.lesson_location;
			additional_data['core.lesson_status'] = cmi.core.lesson_status;
			//additional_data['total_time'] = cmi.core.total_time; // creo que está de más porque se incluye totaltime
			//additional_data['launch_data'] = 	cmi.launch_data;

			additional_data['mode'] = 'normal';
			additional_data['manual_raw'] = cmi.core.score.manual_raw;

			if (blink.events
				&& blink.events.updateReported) {
				if (forceOnline) {
					additional_data['events'] = cmi.events;
				} else {
					additional_data['events'] = blink.events.updateReported(cmi.events);
				}
			}

			// If offline, add date of lastCommit
			if (offline && !forceOnline) { // sólo offline debe mandar fecha del dispositivo. En online debe ser siempre NOW del servidor.
				var d = new Date();
				var d_time = d.getTime() / 1000;
				d_time = parseInt(d_time);
				additional_data['lastCommit'] = d_time;
			}
			//console.log("AADIN ADDITIONAL: ");
			//console.log(additional_data);

			if (offline && !forceOnline) {
				// para trazabilidad offline. Cuando se está en libro digital no hay que obtener nigún tipo de nota
				var scriptOffline = "";

				if (!window.repeatClass) {
					clasificaciones_ejes = new Object();
					avance = 0;

					if (common_status == LESSON_STATUS_INCOMPLETE) avance = 0;
					if (common_status == LESSON_STATUS_COMPLETED || common_status == LESSON_STATUS_PASSED) avance = 100;

					// Ticket #5638
					clasificacion = '';
					if (cmi.core.score.raw || cmi.core.score.raw === 0)
						clasificacion = cmi.core.score.raw*100/cmi.core.score.max;
					if (cmi.core.score.manual_raw != '' && cmi.core.score.manual_raw!='-1')
						// La nota manual no está sujeta a rangos del scorm
						//clasificacion = cmi.core.score.manual_raw*100/cmi.core.score.max;
						clasificacion = cmi.core.score.manual_raw;
					nota = obtenerNota(clasificacion);
					nota = pintaNotaNumero(nota, "toc");

					if (esWeb) { //actividad scorm
						tieneCorrecciones = 0;
						transpHechas = 0;
						evaltype = 0;
						tienePendientes = false;
						game_score = 0;
						game_token = 0;
						custom_activity_status = 0;
					}
					else { //blink slides
						suspend_data_json = json_decode(cmi.suspend_data);
						clasificaciones_ejes = suspend_data_json.clasificacion_ejes;

						if (suspend_data_json.tieneCorregiblesPendientes && (common_status == LESSON_STATUS_PASSED || common_status == LESSON_STATUS_COMPLETED))
							nota=obtenerNotaPendiente(nota);
						tieneCorrecciones = suspend_data_json.tieneCorreciones;
						transpHechas = suspend_data_json.transpHechas;
						avance = suspend_data_json.avance;
						tienePendientes = suspend_data_json.tieneCorregiblesPendientes;
						game_score = (suspend_data_json.game_score) ? suspend_data_json.game_score : 0;
						game_token = (suspend_data_json.game_token) ? suspend_data_json.game_token : 0;
						custom_activity_status = suspend_data_json.custom_activity_status ? suspend_data_json.custom_activity_status : 0;
					}

					tiempo = cmi.core.total_time.split(".")[0];

					if (tieneCorrecciones) {
						estado = 2; // ESTADO_CERRADA
					} else if (common_status == LESSON_STATUS_PASSED || common_status == LESSON_STATUS_COMPLETED) {
						estado = 1; // ESTADO_CONCLUIDA
					} else if (common_status == LESSON_STATUS_NOTATTEMPTED && transpHechas == '') {
						estado = -1; // ESTADO_SIN_INICIAR
					} else {
						estado = 0; // ESTADO_INICIADA
					}
					avance = Math.round(avance);


					var estado_transparencias = '',
						tipo_transparencias = '';
					if (!esWeb) {
						// Guardamos estado transparencias
						var estados = [],
							intentos = [],
							tipos = [],
							i = 0,
							slideObj;
						if (suspend_data_json.status) {
							for (slideid in suspend_data_json.status) {
								var slide = suspend_data_json.status[slideid];

								slideObj = window['t' + i + '_slide'];
								if(typeof slideObj == 'object') {
									tipos.push(slideObj['alias']);

									if (estado == 1 || estado == 2) {
										estados.push(1);
									} else {
										estados.push(slide.intentos >= slideObj.numMaxIntentos ||
											slide.clasificacion == 1 ? 1 : 0);
									}

									intentos.push(slide.intentos);
								}
								i++;
							}
						}
						if (estados) {
							estado_transparencias = estados;
						}
						if (tipos) {
							tipo_transparencias = ", 'tipo_transparencias':'" + tipos.join(',') + "'";
						}
					}

					ahora = new Date();
					// BK-17360
					if(typeof actividades === 'undefined'){
						actividades = Array();
					}
					fecha_timestamp = (actividades && actividades[idclase] && actividades[idclase].fecha_timestamp) ? actividades[idclase].fecha_timestamp : Math.floor(ahora.getTime() / 1000);

					var notas_medias = {};
					var style;

					if (blink.theme.isAdaptative()) {
						var classStyle = blink.theme.styles[blink.activity.originalStyleName];

						if (classStyle) {
							style = new classStyle;
						} else if (blink.activity.currentStyle) {
							style = blink.activity.currentStyle;
						} else {
							style = new blink.theme.styles['basic'];
						}

						var attempts_info = style.getAdditionalVarsScriptOffline(cmi);

						if(esWeb){
							tienePendientes = style.checkNotaPendiente(tienePendientes);
						}

						if((common_status == LESSON_STATUS_PASSED || common_status == LESSON_STATUS_COMPLETED) && tienePendientes){
							nota = obtenerNotaPendiente(nota);
						}
					}

					if (typeof attempts_info !== 'undefined' && attempts_info != '' && !!Object.keys(attempts_info).length) { //BK-18285
						notas_medias["F"] = attempts_info['first_attempt_raw'];
						notas_medias["B"] = attempts_info['best_attempt_raw'];
						notas_medias["L"] = attempts_info['nota'];
					} else {
						notas_medias["0"] = clasificacion;
						notas_medias["1"] = cmi.core.score.scoreAvg1;
						notas_medias["2"] = cmi.core.score.scoreAvg2;
						notas_medias["3"] = cmi.core.score.scoreAvg3;
						notas_medias["4"] = cmi.core.score.scoreAvg4;
					}

					scriptOffline = blink.domain.writeScriptOffline(estado, avance, nota,
						clasificacion, tiempo, fecha_timestamp, clasificaciones_ejes, estado_transparencias,
						intentos, tipo_transparencias, trigger, notas_medias, tienePendientes, game_score, game_token, custom_activity_status);

				}
				else {
					//repeat class offline
					scriptOffline = "actividades[" + SCORMparams.idclase + "] = {'estado':-1,'nota':0};";
				}

				postData += '&scriptoffline=' + encodeURIComponent(encode64(scriptOffline));
				formData.append('scriptoffline', encode64(scriptOffline));
			} else if(blink.isIosApp && forceOnline){ //BK-21631 Mandar scriptoffline en ios app
				postData += '&scriptoffline=""';
				formData.append('scriptoffline', "");
			}

			var props_offline = ['student_id', 'student_name', 'student_surname', 'student_ImageUrl', 'user_role'];

			if (window.repeatClass) {
				if (offline && !forceOnline) {
					//quedarse sólo con student_*, lo pintado y lo mínimo para la carga
					var allscormdata = {
						mode: 'normal'
					};
					if (!esWeb) {
						//slides de blink
						var suspend_data_json = json_decode(cmi.suspend_data);

						if (suspend_data_json) {
							var status = {};
							for (var slideid in suspend_data_json.status) {
								var slide = suspend_data_json.status[slideid];
								var pintado = {};
								var props = ['lineax', 'lineay', 'tipolinea', 'colorlinea', 'tools', 'extraSCORM', 'notesArray'];
								for (var i=0; i<props.length; i++) {
									var prop = props[i];
									if (slide[prop] && !_.isEmpty(slide[prop])) {
										pintado[prop] = slide[prop];
									}
								}

								if (!_.isEmpty(pintado)) {
									status[slideid] = $.extend(pintado, {
										respuestas: [],
										intentos: 0,
										clasificacion: 0,
										clasificacionprofesor: -1,
										resultados: []
									});
								}
							}

							if (!_.isEmpty(status)) {
								var data = json_encode({
									status: status
								});
								allscormdata.suspenddata = data;
								allscormdata.suspend_data = data;
							}
						}
					}

					for (var i=0; i<props_offline.length; i++) {
						var prop = props_offline[i];
						if (cmi.core[prop]) {
							allscormdata['core.'+prop] = cmi.core[prop];
						}
					}

					postData += '&allscormdata=' + encodeURIComponent(json_encode(allscormdata));
					formData.append('allscormdata', json_encode(allscormdata));
				}
				else {
					var allscormdata = CollectDataJson(cmi, 'cmi', additional_data);
	                postData += '&allscormdata=' + encodeURIComponent(encode64(allscormdata));
					postData += '&repeatClass=yes';
					formData.append('allscormdata', allscormdata);
					formData.append('repeatClass', 'yes');
				}
			}
			else {
				if (offline && !forceOnline) {
					for (var i=0; i<props_offline.length; i++) {
						var prop = props_offline[i];
						if (cmi.core[prop]) {
							additional_data['core.'+prop] = cmi.core[prop];
						}
					}
				}
				var allscormdata = CollectDataJson(cmi, 'cmi', additional_data);
				postData += '&allscormdata=' + encodeURIComponent(allscormdata);
				formData.append('allscormdata', allscormdata);
			}

			// Si es repeat class no hacemos async.
			// BK-7537 desde app, la petición a online nunca es sincrona para no bloquear al usuario.

			var onBeforeSincro = window.onBeforeUnloadCalled && !blink.isChrome && !blink.isSafari; //BK-21631
			var sincr = (window.repeatClass || onBeforeSincro || window.do_commit_sincr) && (!forceOnline || blink.isIosApp);// BK-20464
			sincr = (sincr || (cmi.core.exit || cmi.core.exit == 'logout')) && (!forceOnline || blink.isIosApp);// BK-20464
			var urlmod = forceOnline ? '' : 'noDijest';

			var dataBeacon = ('URLSearchParams' in window) && blink.isApp && !blink.isOfflinePCApp ? new URLSearchParams(postData) : formData, // BK-21631
				ajaxCall = function() {
					blink.ajax(URL,
						function (msg) {
							if (!window.onBeforeUnloadCalled && !forceOnline) {
								blink.theme.responseCommit(msg);
							}
						},
						{data: postData, async: !sincr},
						{urlMode: urlmod}
					)
				};

			if (('sendBeacon' in navigator) && window.onBeforeUnloadCalled) { //BK-21631 sendBeacon solo al salir.
				if(!navigator.sendBeacon(URL, dataBeacon)){
					ajaxCall()
				}
			} else {
				ajaxCall()
			}
		}
		//BK-8353 && BK-7537
		if (offline && !forceOnline && window.modoVisualizacion != 2 && window.modoVisualizacion != 3) {
			do_commit(true);
		}
	};

	var report = function() {
		var urlSeguimiento = '/include/javascript/seguimientoCurso.js.php?idcurso=' + idcurso;
		loadScript(urlSeguimiento, false, onLoadScript);
	};

	if (blink.events
		&& blink.events.executeReport) {
		blink.events.executeReport(report)
	} else {
		report();
	}
}

function CollectDataJson(data,parent,additional_data) {
	var ardata = CollectDataArray(data, parent);
	if (additional_data) {
		for (var key in additional_data) {
			if(additional_data.hasOwnProperty(key))
			ardata[key] = additional_data[key];
		}
	}

	datastring = ArrayToJson(ardata);
	return datastring;
}

function ArrayToJson(ardata) {
	// Convert to object to encode json
	var objdata = {};
	for (var key in ardata) {
		if(ardata.hasOwnProperty(key))
			objdata[key] = ardata[key];
	}
	datastring = json_encode(objdata);
	return datastring;
}

/**
 * url attribute style - not used
 */
function CollectData(data,parent) {
	var datastring = '';
	for (property in data) {
		if (typeof data[property] == 'object') {
			datastring += CollectData(data[property],parent+'.'+property);
		} else {
			element = parent+'.'+property;
			expression = new RegExp(CMIIndex,'g');

			// get the generic name for this element (e.g. convert 'cmi.interactions.1.id' to 'cmi.interactions.n.id')
			elementmodel = String(element).replace(expression,'.n.');

			// ignore the session time element
			if (element != "cmi.core.session_time") {

				// check if this specific element is not defined in the datamodel,
				// but the generic element name is
				if ((eval('typeof datamodel["'+element+'"]')) == "undefined"
					&& (eval('typeof datamodel["'+elementmodel+'"]')) != "undefined") {

					// add this specific element to the data model (by cloning
					// the generic element) so we can track changes to it
					eval('datamodel["'+element+'"]=CloneObj(datamodel["'+elementmodel+'"]);');
				}

				// check if the current element exists in the datamodel
				if ((typeof eval('datamodel["'+element+'"]')) != "undefined") {

					// make sure this is not a read only element
					if (eval('datamodel["'+element+'"].mod') != 'r') {

						elementstring = '&'+underscore(element)+'='+encodeURIComponent(data[property]);

						// check if the element has a default value
						if ((typeof eval('datamodel["'+element+'"].defaultvalue')) != "undefined") {

							// check if the default value is different from the current value
							if (eval('datamodel["'+element+'"].defaultvalue') != data[property]
								|| eval('typeof(datamodel["'+element+'"].defaultvalue)') != typeof(data[property])) {

								// append the URI fragment to the string we plan to commit
								datastring += elementstring;

								// update the element default to reflect the current committed value
								eval('datamodel["'+element+'"].defaultvalue=data[property];');
							}
						} else {
							// append the URI fragment to the string we plan to commit
							datastring += elementstring;
							// no default value for the element, so set it now
							eval('datamodel["'+element+'"].defaultvalue=data[property];');
						}
					}
				}
			}
		}
	}
	return datastring;
}

function CollectDataArray(data,parent) {
	var ardata = new Array();
	for (property in data) {
		if (typeof data[property] == 'object') {
			ardata_aux = CollectDataArray(data[property],parent+'.'+property);
			for (var key in ardata_aux)
				ardata[key] = ardata_aux[key];
		} else {
			element = parent+'.'+property;
			expression = new RegExp(CMIIndex,'g');

			// get the generic name for this element (e.g. convert 'cmi.interactions.1.id' to 'cmi.interactions.n.id')
			elementmodel = String(element).replace(expression,'.n.');

			// ignore the session time element and suspend_data: la guardamos en campo específico
			if (element != "cmi.core.session_time" && element != 'cmi.suspend_data') {

				// check if this specific element is not defined in the datamodel,
				// but the generic element name is
				if ((eval('typeof datamodel["'+element+'"]')) == "undefined"
					&& (eval('typeof datamodel["'+elementmodel+'"]')) != "undefined") {

					// add this specific element to the data model (by cloning
					// the generic element) so we can track changes to it
					eval('datamodel["'+element+'"]=CloneObj(datamodel["'+elementmodel+'"]);');
				}

				// check if the current element exists in the datamodel
				if ((typeof eval('datamodel["'+element+'"]')) != "undefined") {

					// make sure this is not a read only element
					if (eval('datamodel["'+element+'"].mod') != 'r') {

						//elementkey = underscore(element);
						elementkey = element;
						// BK-8200 - remove encodeURIComponent
						//elementvalue = encodeURIComponent(data[property]);
						elementvalue = data[property];

						// check if the element has a default value
						if ((typeof eval('datamodel["'+element+'"].defaultvalue')) != "undefined") {

							// check if the default value is different from the current value
							if (eval('datamodel["'+element+'"].defaultvalue') != data[property]
								|| eval('typeof(datamodel["'+element+'"].defaultvalue)') != typeof(data[property])) {

								// append the URI fragment to the string we plan to commit
								ardata[elementkey] = '' + elementvalue;

								if(elementkey == "cmi.core.total_time"){
									ardata[elementkey]='' + data[property];
								}
								// update the element default to reflect the current committed value

								// No cambiar defaultvalue al nuevo valor
								// de esta forma siempre se envía el elemento si el SCO lo ha seteado una vez
								//eval('datamodel["'+element+'"].defaultvalue=data[property];');
							}
						} else {
							ardata[elementkey] = '' + elementvalue;

							// no default value for the element, so set it now
							// No cambiar defaultvalue al nuevo valor
							// de esta forma siempre se envía el elemento si el SCO lo ha seteado una vez
							//eval('datamodel["'+element+'"].defaultvalue=data[property];');
						}
					}
				}
			}
		}
	}
	return ardata;
}

function CloneObj(obj){
	if(obj == null || typeof(obj) != 'object') {
		return obj;
	}

	var temp = new obj.constructor(); // changed (twice)
	for(var key in obj) {
		temp[key] = CloneObj(obj[key]);
	}

	return temp;
}

function underscore(str) {
	str = String(str).replace(/.N/g,".");
	return str.replace(/\./g,"__");
}

/**
 * Process value of jsonScormData to create cmi object and its structure
 */
function processJsonScormData(datos) {
	if (typeof role_usuario != 'undefined') {
		str_to_eval = 'cmi.core.user_role="'+role_usuario+'"';
		eval(str_to_eval);
	}
	for (key in datos) {
		if (datos.hasOwnProperty(key)) {
			str_to_eval = key;
			if (key.indexOf('cmi') != 0) str_to_eval = 'cmi.'+str_to_eval;
			if (str_to_eval.indexOf('cmi.objectives') == -1 && str_to_eval.indexOf('cmi.interactions') == -1) {
				var d_to_eval = datos[key];
				str_to_eval += "=d_to_eval";
				eval(str_to_eval);
				// Si se trata de raw, también lo ejecutamos como core.score.raw
				if (key == 'raw' || key == 'manual_raw') {
					str_to_eval = 'cmi.core.score.'+key;
					str_to_eval += "=d_to_eval";
					eval(str_to_eval);
				}
			}
		}
	}
	// Now construct objectives and interactions
	scorm_reconstitute_array_element(1, datos, 'cmi.objectives', ['score']);
	scorm_reconstitute_array_element(1, datos, 'cmi.interactions', ['objectives', 'correct_responses']);
}

function scorm_reconstitute_array_element(sversion, userdata, element_name, children) {
	current = '';
	current_subelement = '';
	current_sub = '';
	count = 0;
	count_sub = 0;
	scormseperator = '_';
	if (sversion == 2) { // SCORM_VERSION_13 scorm 1.3 elements use a . instead of an _
		scormseperator = '.';
	}

	// filter out the ones we want
	element_list = new Array();
	for (element in userdata) {
		if (userdata.hasOwnProperty(element)) {
			value = userdata[element];
			if (element.substr(0, element_name.length) == element_name) {
				element_list[element] = value;
			}
		}
	}
   // sort elements in .n array order
	element_list.sort(scorm_element_cmp);

	try {
	// generate JavaScript
	for (element in element_list) {
		if (element_list.hasOwnProperty(element)) {
			value = element_list[element];
			value = value.replace(/\n/g, "\\n"); // BK-12877
			if (sversion == 2){  // SCORM_VERSION_13
				element = element.replace(/\.(\d+)\./g, ".N\$1.");
				matches = element.match(/\.(N\d+)\./);
			} else {
				element = element.replace(/\.(\d+)\./g, "_\$1.");
				matches = element.match(/\_(\d+)\./);
			}
			if (matches && matches.length > 0 && current != matches[1]) {
				if (count_sub > 0) {
					str_to_eval = element_name+scormseperator+current+'.'+current_subelement+'._count = '+count_sub;
					eval(str_to_eval);
				}
				current = matches[1];
				count++;
				current_subelement = '';
				current_sub = '';
				count_sub = 0;
				end = element.indexOf(matches[1]) + matches[1].length;
				subelement = element.substr(0, end);
				str_to_eval = subelement+" = new Object()";
				eval(str_to_eval);
				// now add the children
				for (var i = 0; i < children.length; i++) {
					child = children[i];
					str_to_eval = subelement+"."+child+" = new Object()";
					eval(str_to_eval);
					str_to_eval = subelement+"."+child+"._children = "+child+"_children";
					eval(str_to_eval);
				}
			}

			// now - flesh out the second level elements if there are any
			if (sversion == 2){  // SCORM_VERSION_13
				element = element.replace(/(.*?\.N\d+\..*?)\.(\d+)\./g, "\$1.N\$2.");
				matches = element.match(/.*?\.N\d+\.(.*?)\.(N\d+)\./);
			} else {
				element = element.replace(/(.*?\_\d+\..*?)\.(\d+)\./, "\$1_\$2.");
				matches = element.match(/.*?\_\d+\.(.*?)\_(\d+)\./);
			}

			// check the sub element type
			if (matches && matches.length > 0 && current_subelement != matches[1]) {
				if (count_sub > 0) {
					str_to_eval = element_name+scormseperator+current+'.'+current_subelement+'._count = '+count_sub;
					eval(str_to_eval);
				}
				current_subelement = matches[1];
				current_sub = '';
				count_sub = 0;
				end = element.indexOf(matches[1])+matches[1].length;
				subelement = element.substr(0, end);
				str_to_eval = subelement+" = new Object()";
				eval(str_to_eval);
			}
			// now check the subelement subscript
			if (matches && matches.length > 0 && current_sub != matches[2]) {
				current_sub = matches[2];
				count_sub++;
				end = element.lastIndexOf(matches[2])+matches[2].length;
				subelement = element.substr(0, end);
				str_to_eval = subelement+" = new Object()";
				eval(str_to_eval);
			}
			str_to_eval = element+' = "'+value.replace(/"/g, "'")+'"';
			eval(str_to_eval);
		}
	}
	} catch(err) {
		_showAlert(textweb('scorm_1'));
		blink.log.error(err);
	}


	if (count_sub > 0) {
		str_to_eval = element_name+scormseperator+current+'.'+current_subelement+'._count = '+count_sub;
		eval(str_to_eval);
	}
	if (count > 0) {
		str_to_eval = element_name+'._count = '+count;
		eval(str_to_eval);
	}
}

/**
 * sort function
 * @param string a left array element
 * @param string b right array element
 * @return comparator - 0,1,-1
 */
function scorm_element_cmp(a, b) {
	matches = a.match(/.*?(\d+)\./);
	left = parseInt(matches[1]);
	matches = b.match(/.?(\d+)\./);
	right = parseInt(matches[1]);
	if (left < right) {
		return -1; // smaller
	} else if (left > right) {
		return 1;  // bigger
	} else {
		// look for a second level qualifier eg cmi.interactions_0.correct_responses_0.pattern
		matches = a.match(/.*?(\d+)\.(.*?)\.(\d+)\./);
		if (matches) {
			leftterm = parseInt(matches[2]);
			left = parseInt(matches[3]);
			matches = b.match(/.*?(\d+)\.(.*?)\.(\d+)\./);
			if (matches) {
				rightterm = parseInt(matches[2]);
				right = parteInt(matches[3]);
				if (leftterm < rightterm) {
					return -1; // smaller
				} else if (leftterm > rightterm) {
					return 1;  // bigger
				} else {
					if (left < right) {
						return -1; // smaller
					} else if (left > right) {
						return 1;  // bigger
					}
				}
			}
		}
		// fall back for no second level matches or second level matches are equal
		return 0;  // equal to
	}
}

// ====================================================
// Final Setup
//


nombreUsuarioRev = '';
imagenUsuarioRev = '';

(function(W,B) {
    "use strict"

    B.scorm = {

        getSCORMParams : function() {
            return {idclase: W.idclase, idcurso: W.idcurso, idtema: W.idtema};
        }

    }

})(window, window.blink);
